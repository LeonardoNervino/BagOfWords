# -*- coding: utf-8 -*-
"""Trabalho5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctsVDi5PJI6w2l3xdxF6FXL--G5PByz4
"""

'''   Aluno: Leonardo Nervino Friedrich

 Sua tarefa será  gerar a matriz termo documento, dos documentos recuperados da internet e 
 imprimir esta matriz na tela. Para tanto: 
   a) Considere que todas as listas de sentenças devem ser transformadas em listas de vetores, 
 onde cada item será uma das palavras da sentença. 
   b) Todos  os  vetores  devem  ser  unidos  em  um  corpus  único  formando  uma  lista  de  vetores, 
 onde cada item será um lexema.
   c) Este único corpus será usado para gerar o vocabulário. 
   d) O  resultado  esperado  será  uma  matriz  termo  documento  criada  a  partir  da  aplicação  da 
 técnica bag of Words em todo o corpus.'''

import re
import pandas
import requests
from bs4 import BeautifulSoup

palavras = []     #Armazena as sentenças em cinco listas diferentes.
unicos = []       #Armazena as sentenças em cinco listas diferentes.
vetor = []        #Verifica o numero de vezes que uma palavra aparece em um determinado arquivo


htmls = ['https://www.wonderflow.ai/blog/natural-language-processing-examples', 
        'https://www.cio.com/article/228501/natural-language-processing-nlp-explained.html', 
        'https://www.techtarget.com/searchenterpriseai/definition/natural-language-processing-NLP',
        'https://machinelearningmastery.com/natural-language-processing/',
        'https://www.ibm.com/cloud/learn/natural-language-processing']

for site in htmls:
    html = requests.get(site).content           
    soup = BeautifulSoup(html, "html.parser")
    for data in soup(['style', 'script']):      #remove os scripts e estilos
        data.decompose()                        #remove os scripts e estilos
    palavra = ' '.join(soup.stripped_strings)
    palavra = re.sub(r"[\n\t]", "", palavra)    #remove os espaços vazio
    separador = re.split("[!?.;:,]", palavra)   #separa as sentenças
    palavras.append(" ".join(separador))        #adiciona as sentenças em uma lista

def unico(p):                                   #verifica se a palavra já existe no vetor
  sem_rep = set()                               
  for array in p:                               
    for palavra in array.split():               #percorre cada palavra do vetor
        sem_rep.add(palavra)                    #adiciona a palavra no conjunto
  return sem_rep                                #retorna o conjunto

unicos = unico(palavras)                        
unicos = list(unicos)                           #transforma o conjunto em lista
print(len(unicos))                              

def BOW(arrayDePalavras, texto):                
  array = [0] * len(arrayDePalavras)            
  for string in texto.split():                  #percorre cada palavra do texto
    array[arrayDePalavras.index(string)] += 1   #adiciona 1 no vetor na posição da palavra
  return array                                  #retorna o vetor

for array in palavras:                         
    vetor.append(BOW(unicos, array))            

df = pandas.DataFrame(vetor, columns=unicos)   
display(df)